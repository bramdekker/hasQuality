package com.bramdekker.main.resources;

import antlr.HaskellLexer;
import antlr.HaskellParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * A singleton class that contains functionality to generate, get and set a parse tree representing
 * the Haskell program with the help of Antlr.
 */
public class HaskellParseTree {
  private static HaskellParseTree instance;
  private Map<String, ParseTree> treeDict;

  /** Private constructor to make it singleton. */
  private HaskellParseTree() {}

  /**
   * Get the instance of HaskellParseTree. If it does not exist yet, generate one.
   *
   * @return instance of HaskellParseTree with the tree populated.
   * @throws FileNotFoundException if there is a File in the FileList instance that does not exist.
   */
  public static HaskellParseTree getInstance() throws IOException {
    if (instance == null) {
      instance = generateInstance();
    }

    return instance;
  }

  /**
   * Get the contents of a File as a StringBuilder.
   *
   * @param file a File object from which the contents are read.
   * @return StringBuilder that contains the contents of the file.
   * @throws FileNotFoundException if there is a File in the FileList instance that does not exist.
   */
  private String getFileContents(File file) throws FileNotFoundException {
    Scanner scanner = new Scanner(file);
    StringBuilder contents = new StringBuilder();

    while (scanner.hasNextLine()) {
      contents.append(scanner.nextLine()).append('\n');
    }

    scanner.close();

    return contents.toString();
  }

  /**
   * Generate a new instance of HaskellParseTree. It will create an antlr ParseTree based on the
   * lexer and parser generated by antlr.
   *
   * @return a new instance of HaskellParseTree.
   * @throws FileNotFoundException if there is a File in the FileList instance that does not exist.
   */
  private static HaskellParseTree generateInstance() throws IOException {
    HaskellParseTree parseTree = new HaskellParseTree();
    parseTree.treeDict = new HashMap<>();

    for (File file : FileList.getInstance().getHaskellFiles()) {
      HaskellLexer lexer =
          new HaskellLexer(CharStreams.fromString(parseTree.getFileContents(file)));
      HaskellParser parser = new HaskellParser(new CommonTokenStream(lexer));

      parseTree.treeDict.put(file.getCanonicalPath(), parser.module());
    }

    //    JFrame frame = new JFrame("Antlr parse tree");
    //    JPanel panel = new JPanel();
    //    TreeViewer viewer = new TreeViewer(Arrays.asList(
    //            parser.getRuleNames()), parseTree.tree);
    //    viewer.setScale(1.5); // Scale a little
    //    panel.add(viewer);
    //    frame.add(panel);
    //    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //    frame.pack();
    //    frame.setVisible(true);

    return parseTree;
  }

  /**
   * Getter for the tree field.
   *
   * @return an antlr ParseTree of the whole project.
   */
  public Map<String, ParseTree> getTreeDict() {
    return this.treeDict;
  }
}
